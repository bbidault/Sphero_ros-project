#include "ros/ros.h"
#include "std_msgs/ColorRGBA.h"
#include "geometry_msgs/Twist.h"

#include <sstream>

#include "opencv/cvaux.h"
#include "opencv/highgui.h"
#include "opencv/cxcore.h"
#include <stdio.h>

#include <stdlib.h>
#include <vector>

#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Int32MultiArray.h"

#include <iostream>
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "math.h"


using namespace std;

int Arr[3];
void arrayCallback(const std_msgs::Int32MultiArray::ConstPtr& array);

int main(int argc, char **argv)
{

	ros::init(argc, argv, "test");
	ros::NodeHandle n;
	ros::Subscriber sub = n.subscribe("array", 100, arrayCallback);
	
	ros::Rate loop_rate(10);

	while(ros::ok()){
		ros::spinOnce();
		cout<<"Position paire : ";
		cout<<Arr[0];
		cout<<" ";
		cout<<Arr[1];
		cout<<" ";
		cout<<Arr[2]<<endl;
		ros::spinOnce();
		cout<<"Position impaire : ";
		cout<<Arr[0];
		cout<<" ";
		cout<<Arr[1];
		cout<<" ";
		cout<<Arr[2]<<endl;
	}

	return 0;
}


void arrayCallback(const std_msgs::Int32MultiArray::ConstPtr& array)
{

	int i = 0;
	for(std::vector<int>::const_iterator it = array->data.begin(); it != array->data.end(); ++it)
	{
		Arr[i] = *it;
		i++;
	}


	return;
}

